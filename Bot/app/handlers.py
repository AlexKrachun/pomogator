import logging
from aiogram import types, Bot
from aiogram.types import Message
from aiogram import Router, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from aiogram.filters import Command
from Bot.additioanl.message_templates import message_templates, get_changed_context_line
from Bot.app.keyboard import inline_contexts, inline_modes, inline_pay, dalle_3_settings
from Bot.app.openai_api import request_get_topic, generate_image, get_common_gpt_complection
from Bot.app.faceswap_api import run_face_swap
from Bot.app.anthropic_api import get_claude_text_response
from Bot.app.utils.decorators import processing_guard, block_not_llm_model, block_not_dalle_model

from db.main import db_client
from Bot.app.middlewares import UserRegistrationMiddleware

from Bot.app.utils.state import id_in_processing

import base64
import aiohttp
from dotenv import load_dotenv
import os

load_dotenv()
BOT_TOKEN = os.environ.get('BOT_TOKEN')

# logger = logging.getLogger(__name__)
logger = logging.getLogger('bot_logger')

router = Router()
router.message.middleware(UserRegistrationMiddleware())
router.callback_query.middleware(UserRegistrationMiddleware())


async def print_text_message(text: str, message: Message):
    if len(text) < 4096:

        # message.answer(text)
        try:
            await message.answer(text, parse_mode="Markdown")
        except Exception as e:
            # print('1' * 100)
            # print(e)
            await message.answer(text)


    else:
        while text != '':
            st = text[:min(4090, len(text))]

            if st.count('```') % 2 == 0:

                # message.answer(st)
                try:
                    await message.answer(st, parse_mode="Markdown")
                except Exception as e:
                    # print('2' * 100)
                    # print(e)
                    await message.answer(st)

                text = text[len(st):]
            else:

                # message.answer(st + '```')
                try:
                    await message.answer(st + '\n```', parse_mode="Markdown")
                except Exception as e:
                    # print('3' * 100)
                    # print(e)
                    await message.answer(st + '\n```')

                if not text:
                    break
                text = text[len(st):]
                if text.count('```') % 2 != 0:
                    text = '```\n' + text


@router.message(Command('contexts'))
@processing_guard
@block_not_llm_model
async def language_cmd(message: types.Message):
    try:
        reply_markup = await inline_contexts(message.from_user.id)
        await message.answer(
            message_templates['ru']['contexts'],
            reply_markup=reply_markup
        )
        logger.debug("–û—Ç–≤–µ—Ç –Ω–∞ /contexts —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /contexts")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /contexts.")


@router.message(Command('pay'))
async def pay_cmd(message: types.Message):
    try:
        await message.answer(
            '–ü–æ–∫–∞ —Ç—É—Ç –≤—Å–µ for free, –º—ã –≤–æ–∑—å–º–µ–º –æ—Ç –≤–∞—Å –¥–µ–Ω—å–≥–∏ –≤ next time.',
            reply_markup=inline_pay
        )
        logger.debug("–û—Ç–≤–µ—Ç –Ω–∞ /pay —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /pay")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /pay.")


@router.message(Command('mode'))
@processing_guard
async def mode_cmd(message: types.Message):
    # print("I am in /mode " * 10)
    try:
        reply_markup = await inline_modes(
            message.from_user.id,
            # curr_users_models
            db_client.get_user_model_by_tg_id(tg_id=message.from_user.id, ),
        )
        await message.answer(
            '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–π—Ä–æ—Å–µ—Ç—å',
            reply_markup=reply_markup
        )
        logger.debug("–û—Ç–≤–µ—Ç –Ω–∞ /mode —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /mode")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /mode.")


@router.message(Command('start'))
async def start_cmd(message: types.Message, state: FSMContext):
    try:
        us_id = message.from_user.id

        current_state = await state.get_state()
        if current_state is not None:
            await state.clear()
            await message.reply('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è c–±—Ä–æ—à–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –ª–∏—Ü–æ.')
            if us_id in id_in_processing:
                id_in_processing.remove(us_id)
                logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {us_id} –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return
        
        if db_client.get_user_model_by_tg_id(tg_id=us_id) == 'face-swap':
            await print_text_message("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏. *–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—éüñº*, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞–¥–æ –∏–∑–º–µ–Ω–∏—Ç—å –ª–∏—Ü–æ.\n\n–ü–æ—á–∏—Ç–∞—Ç—å –ø—Ä–æ —Ñ—É–Ω–∫—Ü–∏–æ–ª–∞–Ω –±–æ—Ç–∞ –∏ –Ω–∞—à–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –º–æ–∂–Ω–æ –≤ /info", message)
            return


        # await message.answer(message_templates['ru']['start'])
        await print_text_message(message_templates['ru']['start'], message)
        logger.debug("–û—Ç–≤–µ—Ç –Ω–∞ /start —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

    except Exception as e:
        logger.debug(f'–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start')
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start.")


@router.message(Command('profile'))
async def profile_command(message: Message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"
        first_name = message.from_user.first_name or "–Ω–µ —É–∫–∞–∑–∞–Ω"
        last_name = message.from_user.last_name or "–Ω–µ —É–∫–∞–∑–∞–Ω"

        profile_info = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"–õ–æ–≥–∏–Ω: @{username}\n"
            f"–°—á–µ—Ç: <—Å–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ>\n"
            # f"ID: {user_id}\n"
            # f"–ò–º—è: {first_name}\n"
            # f"–§–∞–º–∏–ª–∏—è: {last_name}\n"
        )
        # await message.answer(profile_info)
        await print_text_message(profile_info, message)
        logger.debug("–û—Ç–≤–µ—Ç –Ω–∞ /profile —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logger.debug(f'–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /profile')
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /profile.")


@router.message(Command('info'))
async def info_cmd(message: Message):
    try:
        await print_text_message(message_templates['ru']['info'], message)
        logger.debug("–û—Ç–≤–µ—Ç –Ω–∞ /info —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logger.debug(f'–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /info')
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /info.")


@router.message(Command('new_context'))
@processing_guard
@block_not_llm_model
async def new_context(message: Message):
    try:
        chat_id = db_client.create_new_context_by_tg_id(tg_id=message.from_user.id)
        db_client.set_current_context_by_tg_id(tg_id=message.from_user.id, context_id=chat_id)
        # await message.answer(message_templates['ru']['delete_context'])
        await print_text_message(message_templates['ru']['delete_context'], message)

        logger.debug("–û—Ç–≤–µ—Ç –Ω–∞ /delete_context —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logger.debug(f'–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /delete_context')
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /delete_context.")


@router.callback_query(F.data.startswith('context:'))
@processing_guard
@block_not_llm_model
async def handle_context_switch(callback: types.CallbackQuery):
    try:
        context_id = callback.data.removeprefix("context:")
        us_id = callback.from_user.id

        context = db_client.get_current_context_by_tg_id(tg_id=us_id)
        topic = context.name
        db_client.set_current_context_by_tg_id(tg_id=us_id, context_id=context_id)

        # await callback.message.answer(get_changed_context_line(topic))

        context_history = db_client.make_context_history(chat_id=context_id)
        logger.info(f'–í—ã–≤–µ–¥–µ–Ω–∞ context_history –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us_id}')

        if str(context_id) != str(context.id):
            await callback.message.edit_text(
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.',
                reply_markup=await inline_contexts(us_id),
            )

        await callback.message.answer('–í–æ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:')

        for msg in context_history:
            try:
                await callback.message.answer(msg, parse_mode="Markdown")
            except Exception as e:
                await callback.message.answer(msg)

        await callback.message.answer(get_changed_context_line(topic))

        await callback.answer()



    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_context_switch")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.")


@router.callback_query(F.data.startswith('model:'))
@processing_guard
async def handle_model_switch(callback: types.CallbackQuery):
    try:
        model_name = callback.data.removeprefix("model:")
        us_id = callback.from_user.id
        if db_client.get_user_model_by_tg_id(us_id) != model_name:
            db_client.switch_user_model_by_tg_id(tg_id=us_id, new_model_name=model_name)

            await callback.message.edit_text(
                '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –≤–∞–º –º–æ–¥–µ–ª—å.',
                reply_markup=await inline_modes(us_id, db_client.get_user_model_by_tg_id(tg_id=us_id))
            )
            if model_name in ['dall-e-3']:
                curr_size = db_client.get_dalle_shape_by_tg_id(us_id)
                curr_resolution = db_client.get_dalle_quality_by_tg_id(us_id)
                await callback.message.answer(message_templates['ru']['dall_e_3_handler'], parse_mode="Markdown",
                                              reply_markup=await dalle_3_settings(us_id, curr_resolution, curr_size))
                # await callback.message.answer('*–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:*', parse_mode="Markdown")
            elif model_name in ['face-swap']:
                await callback.message.answer(message_templates['ru']['face-swap-1'], parse_mode="Markdown")

            await callback.answer()
            logger.debug(f"–ú–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {model_name}")
        else:
            await callback.answer()

    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_model_switch")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –º–æ–¥–µ–ª–∏.")


@router.callback_query(F.data.startswith('quality:'))
@processing_guard
@block_not_dalle_model
async def handle_dalle_3_quality_switch(callback: types.CallbackQuery):
    try:
        curr_quality = callback.data.removeprefix("quality:")
        us_id = callback.from_user.id
        if db_client.get_dalle_quality_by_tg_id(us_id) != curr_quality:
            db_client.set_dalle_quality_by_tg_id(tg_id=us_id, dalle_quality=curr_quality)

            await callback.message.edit_text(
                message_templates['ru']['dall_e_3_handler'], parse_mode="Markdown",
                reply_markup=await dalle_3_settings(us_id, curr_quality, db_client.get_dalle_shape_by_tg_id(us_id))
            )
            await callback.answer()
            logger.debug(f"–ö–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {curr_quality}")
        else:
            await callback.answer()

    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_dalle_3_quality_switch")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ dalle_3_quality.")


@router.callback_query(F.data.startswith('resolution:'))
@processing_guard
@block_not_dalle_model
async def handle_dalle_3_resolution_switch(callback: types.CallbackQuery):
    try:
        curr_resolution = callback.data.removeprefix("resolution:")
        us_id = callback.from_user.id
        if db_client.get_dalle_shape_by_tg_id(us_id) != curr_resolution:
            db_client.set_dalle_shape_by_tg_id(us_id, dalle_shape=curr_resolution)

            await callback.message.edit_text(
                message_templates['ru']['dall_e_3_handler'], parse_mode="Markdown",
                reply_markup=await dalle_3_settings(user_id=us_id, quality=db_client.get_dalle_quality_by_tg_id(us_id),
                                                    resolution=curr_resolution)
            )
            await callback.answer()
            logger.debug(f"–ú–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {curr_resolution}")
        else:
            await callback.answer()

    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_dalle_3_resolution_switch")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.")


async def openai_gpt_handler(message: Message, bot: Bot, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è openai –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    us_id = message.from_user.id

    if not message.text:
        await message.answer("–ü–æ–∫–∞ –º—ã —É–º–µ–µ–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
        return

    try:
        user_message = message.text
        id_in_processing.add(us_id)

        if db_client.user_has_empty_curr_context_by_tg_id(us_id):
            chat_id = db_client.get_current_context_id_by_tg_id(tg_id=us_id)

            dialog_name = await request_get_topic(user_message)

            db_client.update_dialog_neame(chat_id=chat_id, dialog_name=dialog_name)

        curr_context_id = db_client.get_current_context_by_tg_id(us_id).id

        user_teg = message.from_user.username
        db_client.add_message(chat_id=curr_context_id, role='user', text=user_message, author_name=user_teg)

        processing_message = await message.answer(message_templates['ru']['processing'])

        await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")

        response = await get_common_gpt_complection(
            db_client.get_full_dialog(curr_context_id)[-15:],
            db_client.get_user_model_by_tg_id(us_id)
        )

        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us_id}: {response}")

        await message.bot.delete_message(
            chat_id=processing_message.chat.id,
            message_id=processing_message.message_id
        )
        model_name = db_client.get_user_model_by_tg_id(us_id)
        db_client.add_message(chat_id=curr_context_id, role='assistant', text=response, author_name=model_name)

        # try:
        #     await message.answer(response, parse_mode="Markdown")
        # except Exception as e:
        #     await message.answer(response)
        await print_text_message(response, message)




    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ openai_gpt_handler –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us_id}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    finally:
        if us_id in id_in_processing:
            id_in_processing.remove(us_id)
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {us_id} –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ openai_gpt_handler.")


async def cloude_text_model_handler(message: Message, bot: Bot, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è anthropic –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    us_id = message.from_user.id

    if not message.text:
        await message.answer("–ü–æ–∫–∞ –º—ã —É–º–µ–µ–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
        return

    try:
        user_message = message.text

        id_in_processing.add(us_id)

        if db_client.user_has_empty_curr_context_by_tg_id(us_id):
            chat_id = db_client.get_current_context_id_by_tg_id(tg_id=us_id)

            dialog_name = await request_get_topic(user_message)

            db_client.update_dialog_neame(chat_id=chat_id, dialog_name=dialog_name)

        curr_context_id = db_client.get_current_context_by_tg_id(us_id).id

        user_teg = message.from_user.username

        db_client.add_message(chat_id=curr_context_id, role='user', text=user_message, author_name=user_teg)

        processing_message = await message.answer(message_templates['ru']['processing'])

        await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")

        response = await get_claude_text_response(
            db_client.get_full_dialog(curr_context_id)[-15:],
            db_client.get_user_model_by_tg_id(us_id)
        )

        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç cloude –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us_id}: {response}")

        await message.bot.delete_message(
            chat_id=processing_message.chat.id,
            message_id=processing_message.message_id
        )

        model_name = db_client.get_user_model_by_tg_id(us_id)
        db_client.add_message(chat_id=curr_context_id, role='assistant', text=response, author_name=model_name)

        # try:
        #     await message.answer(response, parse_mode="Markdown")
        # except Exception as e:
        #     await message.answer(response)
        await print_text_message(response, message)



    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ cloude_text_model_handler –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us_id}, {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    finally:
        if us_id in id_in_processing:
            id_in_processing.remove(us_id)
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {us_id} –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ cloude_text_model_handler.")


async def dall_e_3_handler(message: Message, bot: Bot, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text} –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

    us_id = message.from_user.id
    # if us_id in id_in_processing:
    #     logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {us_id} –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
    #     await message.answer(message_templates['ru']['id_in_procces'])
    #     return

    try:
        id_in_processing.add(us_id)

        processing_message = await message.answer(message_templates['ru']['processing'])
        await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")

        curr_size = db_client.get_dalle_shape_by_tg_id(us_id)
        curr_quality = db_client.get_dalle_quality_by_tg_id(us_id)
        ans = await generate_image(message.text, model="dall-e-3", size=curr_size, quality=curr_quality)

        await message.bot.delete_message(
            chat_id=processing_message.chat.id,
            message_id=processing_message.message_id
        )

        if ans.startswith("http://") or ans.startswith("https://"):
            try:
                await message.answer_photo(ans, caption="–í–æ—Ç –≤–∞—à–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")

            except Exception as e:
                await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        else:
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç openai API —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await message.answer(f"–ó–∞–ø—Ä–æ—Å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
            # print(ans)

        curr_size = db_client.get_dalle_shape_by_tg_id(us_id)
        curr_resolution = db_client.get_dalle_quality_by_tg_id(us_id)
        await message.answer(message_templates['ru']['dall_e_3_handler'],
                             reply_markup=await dalle_3_settings(us_id, curr_resolution, curr_size))



    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ ret_dalle_img –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us_id}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    finally:
        if us_id in id_in_processing:
            id_in_processing.remove(us_id)
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {us_id} –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è.")


class FaceSwap(StatesGroup):
    photo_1_done = State()


async def face_swap_handler_first_photo(message: Message, bot: Bot, state: FSMContext):
    us_id = message.from_user.id
    if not message.photo:
        await message.answer("face-swap —É–º–µ–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n\n–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ")
        return

    try:
        id_in_processing.add(us_id)
        photo = message.photo[-1]
        file_id = photo.file_id

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ Telegram
        file_info = await bot.get_file(file_id)

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ Base64
        async with aiohttp.ClientSession() as session:
            async with session.get(f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_info.file_path}") as response:
                if response.status == 200:
                    base64_encoded = base64.b64encode(await response.read()).decode("utf-8")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ Base64 –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.update_data(photo_1_done=base64_encoded)

        await message.reply(message_templates['ru']['face-swap-3'], parse_mode="Markdown")
        await state.set_state(FaceSwap.photo_1_done)

        # await message.answer(message_templates['ru']['face-swap-2'], parse_mode="Markdown")

    except Exception as e:
        # logger.debug(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ face_swap_handler_first_photo –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us_id}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()
        if us_id in id_in_processing:
            id_in_processing.remove(us_id)


@router.message(FaceSwap.photo_1_done)
async def face_swap_handler_second_photo(message: Message, bot: Bot, state: FSMContext):
    processing_message = await message.reply(message_templates['ru']['processing'])
    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")

    try:

        us_id = message.from_user.id

        photo = message.photo[-1]
        file_id = photo.file_id

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ Telegram
        file_info = await bot.get_file(file_id)

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ Base64
        async with aiohttp.ClientSession() as session:
            async with session.get(f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_info.file_path}") as response:
                if response.status == 200:
                    base64_encoded = base64.b64encode(await response.read()).decode("utf-8")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        data = await state.get_data()
        img_1_base64 = data.get('photo_1_done')
        img_2_base64 = base64_encoded

        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        await state.clear()

        url = await run_face_swap(img_1_base64, img_2_base64)
        if url == None:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è." + '\n\n'
                                 + message_templates['ru']['face-swap-1'], parse_mode="Markdown")
            # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
            await state.clear()
            if us_id in id_in_processing:
                id_in_processing.remove(us_id)
                logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {us_id} –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è.")
                # await message.answer(message_templates['ru']['face-swap-1'], parse_mode="Markdown")
            return

        await message.answer_photo(url)

        await message.answer('–°–ª–µ–¥—É—é—â–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è:\n\n' + message_templates['ru']['face-swap-1'], parse_mode="Markdown")

        if us_id in id_in_processing:
            id_in_processing.remove(us_id)
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {us_id} –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è.")


    except Exception as e:
        # logger.debug(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ face_swap_handler_first_photo –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us_id}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑.")
    finally:
        await message.bot.delete_message(
            chat_id=processing_message.chat.id,
            message_id=processing_message.message_id
        )


model_handler = {  # –¥–ª—è –Ω–µ–π—Ä–æ–Ω–∫–∏ —Ö—Ä–∞–Ω–∏–º —Ö–µ–Ω–¥–ª–µ—Ä
    'gpt-4o-mini': openai_gpt_handler,
    'gpt-4o': openai_gpt_handler,
    'o1-mini': openai_gpt_handler,
    'o1-preview': openai_gpt_handler,
    'dall-e-3': dall_e_3_handler,
    'face-swap': face_swap_handler_first_photo,
    'claude-3-5-sonnet-latest': cloude_text_model_handler,
    'claude-3-5-haiku-latest': cloude_text_model_handler
}


@router.message()
@processing_guard
async def echo_msg(message: Message, bot: Bot, state: FSMContext):
    try:
        # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        us_id = message.from_user.id
        if db_client.user_is_new_by_tg_id(us_id):
            db_client.add_user(name=message.from_user.full_name, tg_id=us_id,
                               last_used_model='gpt-4o-mini')  # –≤–æ–∑–º–æ–∂–Ω–æ full_name –ø—É—Å—Ç–æ–π
            chat_id = db_client.create_new_context_by_tg_id(tg_id=us_id)  # –Ω–æ–≤—ã–π —á–∞—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '–ü—É—Å—Ç–æ–π —á–∞—Ç'
            db_client.set_current_context_by_tg_id(tg_id=us_id, context_id=chat_id)

    except Exception as e:
        logger.debug(f'–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")

    last_used_model = db_client.get_user_model_by_tg_id(message.from_user.id)
    logging.debug(f'–î–µ–±–∞–≥ - {last_used_model}')

    await model_handler[last_used_model](message, bot, state)
