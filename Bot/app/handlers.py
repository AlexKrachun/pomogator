import logging
from aiogram import types, Bot
from aiogram.types import Message, LabeledPrice
from aiogram import Router, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton,
                           InlineKeyboardMarkup, InlineKeyboardButton)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from aiogram.filters import Command
from Bot.additional.message_templates import message_templates, get_changed_context_line
from Bot.app.keyboard import inline_contexts, inline_modes, inline_pay, dalle_3_settings
from Bot.app.openai_api import request_get_topic, generate_image, get_common_gpt_complection
from Bot.app.faceswap_api import run_face_swap
from Bot.app.anthropic_api import get_claude_text_response
from Bot.app.utils.decorators import processing_guard, block_not_llm_model, block_not_dalle_model
from Bot.app.save_statistics import save_statistics

from db.main import db_client
from Bot.app.middlewares import UserRegistrationMiddleware

from Bot.app.utils.state import id_in_processing

from Bot.app.utils.utils import print_text_message

from prices import prices_for_users_in_fantiks, price_of_1_token_in_usd, fantik_to_usd, usd_to_fantik
from Bot.app.consts import candy



from dotenv import load_dotenv
import os
import datetime
from Bot.app.consts import CONTEXT_SIZE
import time

load_dotenv()
BOT_TOKEN = os.environ.get('BOT_TOKEN')

# logger = logging.getLogger(__name__)
logger = logging.getLogger('bot_logger')

router = Router()
router.message.middleware(UserRegistrationMiddleware())
router.callback_query.middleware(UserRegistrationMiddleware())


@router.message(Command('contexts'))
@processing_guard
@block_not_llm_model
async def language_cmd(message: types.Message):
    try:
        reply_markup = await inline_contexts(message.from_user.id)
        await message.answer(
            message_templates['ru']['contexts'],
            reply_markup=reply_markup
        )
        logger.debug("–û—Ç–≤–µ—Ç –Ω–∞ /contexts —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /contexts : {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /contexts.")









SUBSCRIPTIONS = {
    "basic": {"title": "–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å", "description": "1 month access", "price": 80_00},
    "optim": {"title": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å", "description": "1 months access", "price": 240_00},
    "pro": {"title": "–ü—Ä–µ–º–∏—É–º —É—Ä–æ–≤–µ–Ω—å", "description": "1 months access", "price": 800_00},
}


@router.message(Command("pay"))
async def cmd_pay(message: types.Message):
    builder = InlineKeyboardBuilder()
    for key, plan in SUBSCRIPTIONS.items():
        builder.button(
            text=f"{plan['title']} ‚Äî Ô∏è{plan['price']//100}‚≠êÔ∏è",
            callback_data=f"subscribe:{key}"
        )
    builder.adjust(1)  # 1 –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥
    await message.answer(
        message_templates['ru']['subscribe_plan'],
        reply_markup=builder.as_markup()
    )

PAYMENT_PROVIDER_TOKEN = "381764678:TEST:125708"
@router.callback_query(F.data.startswith("subscribe:"))
async def process_subscription(callback: types.CallbackQuery):
    """User chose a subscription: send invoice."""
    await callback.answer()  # Acknowledge callback
    plan_key = callback.data.split(':')[1]
    plan = SUBSCRIPTIONS.get(plan_key)
    if not plan:
        return await callback.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞–Ω.")

    prices = [LabeledPrice(label=plan['title'], amount=plan['price'])]

    await callback.bot.send_invoice(
        chat_id=callback.from_user.id,
        title=plan['title'],
        description=plan['description'],
        payload=f"subscription_{plan_key}",
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency="RUB",
        prices=prices,
        start_parameter=f"subscription-{plan_key}",
        need_email=True  # Request email if needed
    )

@router.pre_checkout_query()
async def process_pre_checkout(query: types.PreCheckoutQuery, bot: Bot):
    """Answer pre-checkout queries."""
    await bot.answer_pre_checkout_query(query.id, ok=True)

@router.message(F.successful_payment)
async def process_successful_payment(message: types.Message):
    """Handle successful payment."""
    payment = message.successful_payment
    payload = payment.invoice_payload
    plan_key = payload.replace("subscription_", "")
    await message.reply(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {plan_key} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
































































@router.message(Command('mode'))
@processing_guard
async def mode_cmd(message: types.Message):
    # print("I am in /mode " * 10)
    try:
        reply_markup = await inline_modes(
            message.from_user.id,
            # curr_users_models
            db_client.get_user_model_by_tg_id(tg_id=message.from_user.id, ),
        )
        
        tg_id = message.from_user.id
        candy_left = db_client.get_candy_left_by_tg_id(tg_id)
        weekly_candy_from_sub = db_client.get_weekly_candy_by_tg_id(tg_id)

        await message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –≤–∞–º –º–æ–¥–µ–ª—å.\n–£ –≤–∞—Å –µ—Å—Ç—å: {candy_left}/{weekly_candy_from_sub} {candy} (–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö)",
            reply_markup=reply_markup
        )
        logger.debug("–û—Ç–≤–µ—Ç –Ω–∞ /mode —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /mode : {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /mode.")


@router.message(Command('start'))
async def start_cmd(message: types.Message, state: FSMContext):
    try:
        us_id = message.from_user.id

        current_state = await state.get_state()
        if current_state is not None:
            await state.clear()
            await message.reply('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è c–±—Ä–æ—à–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –ª–∏—Ü–æ.')
            if us_id in id_in_processing:
                id_in_processing.remove(us_id)
                logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {us_id} –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return

        if db_client.get_user_model_by_tg_id(tg_id=us_id) == 'face-swap':
            await print_text_message("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏. *–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—éüñº*, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞–¥–æ –∏–∑–º–µ–Ω–∏—Ç—å –ª–∏—Ü–æ.\n\n–ü–æ—á–∏—Ç–∞—Ç—å –ø—Ä–æ —Ñ—É–Ω–∫—Ü–∏–æ–ª–∞–Ω –±–æ—Ç–∞ –∏ –Ω–∞—à–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –º–æ–∂–Ω–æ –≤ /info", message)
            return


        # await message.answer(message_templates['ru']['start'])
        await print_text_message(message_templates['ru']['start'], message)
        logger.debug("–û—Ç–≤–µ—Ç –Ω–∞ /start —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

    except Exception as e:
        logger.debug(f'–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start : {e}')
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start.")


@router.message(Command('profile'))
async def profile_command(message: Message):
    try:
        # user_id = message.from_user.id
        username = message.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"
        # first_name = message.from_user.first_name or "–Ω–µ —É–∫–∞–∑–∞–Ω"
        # last_name = message.from_user.last_name or "–Ω–µ —É–∫–∞–∑–∞–Ω"
        tg_id = message.from_user.id
        user = db_client.get_user_by_tg_id(tg_id)

        candy_left = user.candy_left
        weekly_candy_from_sub = user.weekly_candy_from_sub

        profile_info = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"–õ–æ–≥–∏–Ω: @{username}\n"
            f"–°—á–µ—Ç: {candy_left} {candy}\n"
        )
        if user.has_sub:  # –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞
            profile_info += f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç –≤–∞–º: {weekly_candy_from_sub} {candy} –≤ –Ω–µ–¥–µ–ª—é\n"
            
            if user.deposits_amount <= 0: # —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —É–∂–µ –Ω–µ –±—É–¥–µ—Ç
                profile_info += "–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è, –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –µ—â–µ —Ä–∞–∑.\n"
            else: # –ø–æ–ø–æ–ª–¥–µ–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç
                profile_info += f"–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è {user.last_fantiks_update_date + datetime.timedelta(weeks=1)}.\n"
                profile_info += f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {user.deposits_amount} –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π."
            
            
        # await message.answer(profile_info)
        await print_text_message(profile_info, message)
        logger.debug("–û—Ç–≤–µ—Ç –Ω–∞ /profile —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logger.debug(f'–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /profile : {e}')
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /profile.")


@router.message(Command('info'))
async def info_cmd(message: Message):
    try:
        await print_text_message(message_templates['ru']['info'], message)
        logger.debug("–û—Ç–≤–µ—Ç –Ω–∞ /info —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logger.debug(f'–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /info : {e}')
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /info.")

@router.message(Command('fantiki'))
async def fantiki_cmd(message: Message):
    try:
        tg_id = message.from_user.id
        user = db_client.get_user_by_tg_id(tg_id)
        candy_left = user.candy_left
        weekly_candy_from_sub = user.weekly_candy_from_sub
        
        answer = f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {candy_left} –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–Ω—Ç–∏–∫–æ–≤"
        
        if user.has_sub:  # –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞
            answer += f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç –≤–∞–º: {weekly_candy_from_sub} {candy} –≤ –Ω–µ–¥–µ–ª—é\n"
            
            if user.deposits_amount <= 0: # —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —É–∂–µ –Ω–µ –±—É–¥–µ—Ç
                answer += "–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è, –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –µ—â–µ —Ä–∞–∑.\n"
            else: # –ø–æ–ø–æ–ª–¥–µ–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç
                answer += f"–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è {user.last_fantiks_update_date + datetime.timedelta(weeks=1)}.\n"
                answer += f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {user.deposits_amount} –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π."

        await print_text_message(answer, message)
        logger.debug("–û—Ç–≤–µ—Ç –Ω–∞ /fantiki —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logger.debug(f'–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /fantiki : {e}')
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /fantiki.")


@router.message(Command('new_context'))
@processing_guard
@block_not_llm_model
async def new_context(message: Message):
    try:
        chat_id = db_client.create_new_context_by_tg_id(tg_id=message.from_user.id)
        db_client.set_current_context_by_tg_id(tg_id=message.from_user.id, context_id=chat_id)
        # await message.answer(message_templates['ru']['delete_context'])
        await print_text_message(message_templates['ru']['delete_context'], message)

        logger.debug("–û—Ç–≤–µ—Ç –Ω–∞ /delete_context —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logger.debug(f'–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /delete_context : {e}')
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /delete_context.")


@router.callback_query(F.data.startswith('context:'))
@processing_guard
@block_not_llm_model
async def handle_context_switch(callback: types.CallbackQuery):
    try:
        context_id = callback.data.removeprefix("context:")
        us_id = callback.from_user.id

        context = db_client.get_current_context_by_tg_id(tg_id=us_id)
        topic = context.name
        db_client.set_current_context_by_tg_id(tg_id=us_id, context_id=context_id)

        # await callback.message.answer(get_changed_context_line(topic))

        context_history = db_client.make_context_history(chat_id=context_id)
        logger.info(f'–í—ã–≤–µ–¥–µ–Ω–∞ context_history –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us_id}')

        if str(context_id) != str(context.id):
            await callback.message.edit_text(
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.',
                reply_markup=await inline_contexts(us_id),
            )

        await callback.message.answer('–í–æ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:')

        for msg in context_history:
            try:
                await callback.message.answer(msg, parse_mode="Markdown")
            except Exception:
                await callback.message.answer(msg)

        await callback.message.answer(get_changed_context_line(topic))

        await callback.answer()



    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_context_switch : {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.")


@router.callback_query(F.data.startswith('model:'))
@processing_guard
async def handle_model_switch(callback: types.CallbackQuery):
    try:
        model_name = callback.data.removeprefix("model:")
        us_id = callback.from_user.id
        if db_client.get_user_model_by_tg_id(us_id) != model_name:
            db_client.switch_user_model_by_tg_id(tg_id=us_id, new_model_name=model_name)


            tg_id = us_id
            candy_left = db_client.get_candy_left_by_tg_id(tg_id)
            weekly_candy_from_sub = db_client.get_weekly_candy_by_tg_id(tg_id)


            await callback.message.edit_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –≤–∞–º –º–æ–¥–µ–ª—å.\n–£ –≤–∞—Å –µ—Å—Ç—å: {candy_left}/{weekly_candy_from_sub} {candy} (–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö)",
                reply_markup=await inline_modes(us_id, db_client.get_user_model_by_tg_id(tg_id=us_id))
            )
            if model_name in ['dall-e-3']:
                curr_size = db_client.get_dalle_shape_by_tg_id(us_id)
                curr_resolution = db_client.get_dalle_quality_by_tg_id(us_id)
                await callback.message.answer(message_templates['ru']['dall_e_3_handler'], parse_mode="Markdown",
                                              reply_markup=await dalle_3_settings(us_id, curr_resolution, curr_size))
                # await callback.message.answer('*–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:*', parse_mode="Markdown")
            elif model_name in ['face-swap']:
                await callback.message.answer(message_templates['ru']['face-swap-1'], parse_mode="Markdown")

            await callback.answer()
            logger.debug(f"–ú–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {model_name}")
        else:
            await callback.answer()

    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_model_switch : {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –º–æ–¥–µ–ª–∏.")


@router.callback_query(F.data.startswith('quality:'))
@processing_guard
@block_not_dalle_model
async def handle_dalle_3_quality_switch(callback: types.CallbackQuery):
    try:
        curr_quality = callback.data.removeprefix("quality:")
        us_id = callback.from_user.id
        if db_client.get_dalle_quality_by_tg_id(us_id) != curr_quality:
            db_client.set_dalle_quality_by_tg_id(tg_id=us_id, dalle_quality=curr_quality)

            await callback.message.edit_text(
                message_templates['ru']['dall_e_3_handler'], parse_mode="Markdown",
                reply_markup=await dalle_3_settings(us_id, curr_quality, db_client.get_dalle_shape_by_tg_id(us_id))
            )
            await callback.answer()
            logger.debug(f"–ö–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {curr_quality}")
        else:
            await callback.answer()

    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_dalle_3_quality_switch : {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ dalle_3_quality.")


@router.callback_query(F.data.startswith('resolution:'))
@processing_guard
@block_not_dalle_model
async def handle_dalle_3_resolution_switch(callback: types.CallbackQuery):
    try:
        curr_resolution = callback.data.removeprefix("resolution:")
        us_id = callback.from_user.id
        if db_client.get_dalle_shape_by_tg_id(us_id) != curr_resolution:
            db_client.set_dalle_shape_by_tg_id(us_id, dalle_shape=curr_resolution)

            await callback.message.edit_text(
                message_templates['ru']['dall_e_3_handler'], parse_mode="Markdown",
                reply_markup=await dalle_3_settings(user_id=us_id, quality=db_client.get_dalle_quality_by_tg_id(us_id),
                                                    resolution=curr_resolution)
            )
            await callback.answer()
            logger.debug(f"–ú–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {curr_resolution}")
        else:
            await callback.answer()

    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_dalle_3_resolution_switch : {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.")


async def openai_gpt_handler(message: Message, bot: Bot, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è openai –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    us_id = message.from_user.id

    model_name = db_client.get_user_model_by_tg_id(us_id)

    statistics = {
        # for required all
        'user_bd_id': db_client.get_user_by_tg_id(us_id).id,
        'user_tg_id': us_id,
        'succeed': False,
        'model': model_name,

        # whenever possible or None

        'cost_for_user_in_fantiks': None,  # —Å–∫–æ–ª—å–∫–æ —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Ç—Ä–∞—Ç–∏–ª –∑–∞ –∑–∞–ø—Ä–æ—Å
        'cost_for_us_in_usd': None,  # —Å–∫–æ–ª—å–∫–æ –º—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ –∑–∞–ø—Ä–æ—Å $

        'sent_to_input_size_tok': None,  # —Ä–∞–∑–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–∞–º–∏ –≤ input api –∑–∞–ø—Ä–æ—Å–∞ (–ø—Ä–æ–ø–º—Ç + –∏—Å—Ç–æ—Ä–∏—è) –≤ —Ç–æ–∫–µ–Ω–∞—Ö
        'answer_size_tok': None,  # —Ä–∞–∑–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –æ—Ç –º–æ–¥–µ–ª–∏ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–æ–∫–µ–Ω–∞—Ö
    }

    if not message.text:
        await message.answer("–ü–æ–∫–∞ –º—ã —É–º–µ–µ–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
        return

    try:
        user_message = message.text
        id_in_processing.add(us_id)

        if db_client.user_has_empty_curr_context_by_tg_id(us_id):
            chat_id = db_client.get_current_context_id_by_tg_id(tg_id=us_id)

            dialog_name = await request_get_topic(user_message)

            db_client.update_dialog_neame(chat_id=chat_id, dialog_name=dialog_name)

        curr_context_id = db_client.get_current_context_by_tg_id(us_id).id

        user_teg = message.from_user.username
        db_client.add_message(chat_id=curr_context_id, role='user', text=user_message, author_name=user_teg)

        processing_message = await message.answer(message_templates['ru']['processing'])

        await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")

        response, response_statistics = await get_common_gpt_complection(
            db_client.get_full_dialog(curr_context_id)[-CONTEXT_SIZE:],
            db_client.get_user_model_by_tg_id(us_id)
        )
        statistics['succeed'] = True
        statistics['sent_to_input_size_tok'] = response_statistics['sent_to_input_size_tok']
        statistics['answer_size_tok'] = response_statistics['answer_size_tok']
        statistics['cost_for_user_in_fantiks'] = prices_for_users_in_fantiks[model_name]
        statistics['cost_for_us_in_usd'] = response_statistics['sent_to_input_size_tok'] * price_of_1_token_in_usd[model_name]['input'] + response_statistics['answer_size_tok'] * price_of_1_token_in_usd[model_name]['output']
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us_id}: {response}")

        await message.bot.delete_message(
            chat_id=processing_message.chat.id,
            message_id=processing_message.message_id
        )
        db_client.add_message(chat_id=curr_context_id, role='assistant', text=response, author_name=model_name)


        # try:
        #     await message.answer(response, parse_mode="Markdown")
        # except Exception as e:
        #     await message.answer(response)
        await print_text_message(response, message)
        return statistics



    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ openai_gpt_handler –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us_id} : {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    finally:
        if us_id in id_in_processing:
            id_in_processing.remove(us_id)
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {us_id} –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ openai_gpt_handler.")
        return statistics


async def cloude_text_model_handler(message: Message, bot: Bot, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è anthropic –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    us_id = message.from_user.id

    model_name = db_client.get_user_model_by_tg_id(us_id)

    statistics = {
        # for required all
        'user_bd_id': db_client.get_user_by_tg_id(us_id).id,
        'user_tg_id': us_id,
        'succeed': False,
        'model': model_name,

        # whenever possible or None

        'cost_for_user_in_fantiks': None,  # —Å–∫–æ–ª—å–∫–æ —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Ç—Ä–∞—Ç–∏–ª –∑–∞ –∑–∞–ø—Ä–æ—Å
        'cost_for_us_in_usd': None,  # —Å–∫–æ–ª—å–∫–æ –º—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ –∑–∞–ø—Ä–æ—Å $

        'sent_to_input_size_tok': None,  # —Ä–∞–∑–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–∞–º–∏ –≤ input api –∑–∞–ø—Ä–æ—Å–∞ (–ø—Ä–æ–ø–º—Ç + –∏—Å—Ç–æ—Ä–∏—è) –≤ —Ç–æ–∫–µ–Ω–∞—Ö
        'answer_size_tok': None,  # —Ä–∞–∑–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –æ—Ç –º–æ–¥–µ–ª–∏ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–æ–∫–µ–Ω–∞—Ö
    }

    if not message.text:
        await message.answer("–ü–æ–∫–∞ –º—ã —É–º–µ–µ–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
        return

    try:
        user_message = message.text

        id_in_processing.add(us_id)

        if db_client.user_has_empty_curr_context_by_tg_id(us_id):
            chat_id = db_client.get_current_context_id_by_tg_id(tg_id=us_id)

            dialog_name = await request_get_topic(user_message)

            db_client.update_dialog_neame(chat_id=chat_id, dialog_name=dialog_name)

        curr_context_id = db_client.get_current_context_by_tg_id(us_id).id

        user_teg = message.from_user.username

        db_client.add_message(chat_id=curr_context_id, role='user', text=user_message, author_name=user_teg)

        processing_message = await message.answer(message_templates['ru']['processing'])

        await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")

        response, response_statistics = await get_claude_text_response(
            db_client.get_full_dialog(curr_context_id)[-CONTEXT_SIZE:],
            db_client.get_user_model_by_tg_id(us_id)
        )
        statistics['succeed'] = True
        statistics['sent_to_input_size_tok'] = response_statistics['sent_to_input_size_tok']
        statistics['answer_size_tok'] = response_statistics['answer_size_tok']
        statistics['cost_for_user_in_fantiks'] = prices_for_users_in_fantiks[model_name]
        statistics['cost_for_us_in_usd'] = response_statistics['sent_to_input_size_tok'] * price_of_1_token_in_usd[model_name]['input'] + response_statistics['answer_size_tok'] * price_of_1_token_in_usd[model_name]['output']
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us_id}: {response}")

        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç cloude –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us_id}: {response}")

        await message.bot.delete_message(
            chat_id=processing_message.chat.id,
            message_id=processing_message.message_id
        )

        db_client.add_message(chat_id=curr_context_id, role='assistant', text=response, author_name=model_name)

        # try:
        #     await message.answer(response, parse_mode="Markdown")
        # except Exception as e:
        #     await message.answer(response)
        await print_text_message(response, message)

        return statistics

    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ cloude_text_model_handler –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us_id}, {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    finally:
        if us_id in id_in_processing:
            id_in_processing.remove(us_id)
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {us_id} –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ cloude_text_model_handler.")
        return statistics


async def dall_e_3_handler(message: Message, bot: Bot, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text} –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

    us_id = message.from_user.id
    # if us_id in id_in_processing:
    #     logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {us_id} –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
    #     await message.answer(message_templates['ru']['id_in_procces'])
    #     return


    statistics = {
        # for required all
        'user_bd_id': db_client.get_user_by_tg_id(us_id).id,
        'user_tg_id': us_id,
        'succeed': False,
        'model': 'dall-e-3',

        # whenever possible or None

        'cost_for_user_in_fantiks': None,  # —Å–∫–æ–ª—å–∫–æ —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Ç—Ä–∞—Ç–∏–ª –∑–∞ –∑–∞–ø—Ä–æ—Å
        'cost_for_us_in_usd': None,  # —Å–∫–æ–ª—å–∫–æ –º—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ –∑–∞–ø—Ä–æ—Å $

        'sent_to_input_size_tok': None,  # —Ä–∞–∑–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–∞–º–∏ –≤ input api –∑–∞–ø—Ä–æ—Å–∞ (–ø—Ä–æ–ø–º—Ç + –∏—Å—Ç–æ—Ä–∏—è) –≤ —Ç–æ–∫–µ–Ω–∞—Ö
        'answer_size_tok': None,  # —Ä–∞–∑–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –æ—Ç –º–æ–¥–µ–ª–∏ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–æ–∫–µ–Ω–∞—Ö
    }
    try:
        id_in_processing.add(us_id)

        processing_message = await message.answer(message_templates['ru']['processing'])
        await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")

        curr_quality = db_client.get_dalle_quality_by_tg_id(us_id)
        curr_size = db_client.get_dalle_shape_by_tg_id(us_id)

        ans = await generate_image(message.text, model="dall-e-3", size=curr_size, quality=curr_quality)

        await message.bot.delete_message(
            chat_id=processing_message.chat.id,
            message_id=processing_message.message_id
        )

        if ans.startswith("http://") or ans.startswith("https://"):
            try:
                await message.answer_photo(ans, caption="–í–æ—Ç –≤–∞—à–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")

                statistics['cost_for_user_in_fantiks'] = prices_for_users_in_fantiks['dall-e-3']  # —Å–∫–æ–ª—å–∫–æ —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Ç—Ä–∞—Ç–∏–ª –∑–∞ –∑–∞–ø—Ä–æ—Å
                statistics['cost_for_us_in_usd'] = price_of_1_token_in_usd['dall-e-3'][curr_size]  # —Å–∫–æ–ª—å–∫–æ –º—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ –∑–∞–ø—Ä–æ—Å $
                statistics['succeed'] = True

            except Exception as e:
                await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ : {e}")
        else:
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç openai API —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await message.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            # print(ans)

        curr_size = db_client.get_dalle_shape_by_tg_id(us_id)
        curr_resolution = db_client.get_dalle_quality_by_tg_id(us_id)
        await message.answer(message_templates['ru']['dall_e_3_handler'],
                             reply_markup=await dalle_3_settings(us_id, curr_resolution, curr_size),
                             parse_mode="Markdown")
        return statistics




    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ ret_dalle_img –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us_id} : {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    finally:
        if us_id in id_in_processing:
            id_in_processing.remove(us_id)
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {us_id} –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è.")


model_handler = {  # –¥–ª—è –Ω–µ–π—Ä–æ–Ω–∫–∏ —Ö—Ä–∞–Ω–∏–º —Ö–µ–Ω–¥–ª–µ—Ä
    'gpt-4o-mini': openai_gpt_handler,
    'claude-3-5-haiku-latest': cloude_text_model_handler,

    'gpt-4o': openai_gpt_handler,
    'o3-mini': openai_gpt_handler,
    'gpt-4o-search-preview': openai_gpt_handler,

    'o1': openai_gpt_handler,
    'gpt-4.5-preview': openai_gpt_handler,
    'claude-3-7-sonnet-latest': cloude_text_model_handler,

    'dall-e-3': dall_e_3_handler,
    # 'face-swap': face_swap_handler_first_photo,
}


@router.message()
@processing_guard
async def echo_msg(message: Message, bot: Bot, state: FSMContext):

    time_of_begin_processing_request = time.time()

    tg_id = message.from_user.id

    db_client.update_sub_by_tg_id(tg_id)  # –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞, –Ω–æ –∫–æ–Ω—á–∏–ª–∞—Å—å - –∑–∞–Ω—É–ª—è–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–Ω—Ç–∏–∫–∏
    db_client.update_candy_by_tg_id(tg_id)  # –¥–∞–µ–º —á–µ–ª—É –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–Ω—Ç–∏–∫–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–¥–ø–∏—Å–∫–µ –∏–ª–∏ –µ–µ –æ—Ç—Å—É—Ç–≤–∏—é

    last_used_model = str(db_client.get_user_model_by_tg_id(tg_id))
    logging.debug(f'–î–µ–±–∞–≥ - {last_used_model}')
    price = prices_for_users_in_fantiks.get(last_used_model, float('inf'))

    if (price == float('inf')):
        logger.critical('\n' * 3 + '!' * 100 + '–¢—ã –±–ª–∏–Ω –≥—Ä–µ–±–∞–Ω—ã–π –≥–µ–Ω–∏–π –Ω–µ –≤–µ–∑–¥–µ –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å. –ê –Ω—É –¥–æ–±–∞–≤—å –±—ã—Å—Ç–µ–µ, –Ω–µ –ø–æ–∑–æ—Ä—å –±–ª–∏–Ω. –õ–û–•' + '\n' * 3)

    if price > db_client.get_candy_left_by_tg_id(tg_id):
        await message.answer("–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ñ–∞–Ω—Ç–∏–∫–æ–≤ üò¢")
        return None


    # –°—Ç—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)))
    handler_now = model_handler.get(last_used_model)
    if handler_now:
        statistics = await handler_now(message, bot, state)
        is_success = statistics['succeed']
        user = db_client.get_user_by_tg_id(tg_id)
        statistics['weekly_candy_from_sub'] = user.weekly_candy_from_sub
        statistics['candy_left'] = user.candy_left
        statistics['user_tg_tag'] = '@' + str(message.from_user.username)
        if tg_id not in [1102889940] and is_success:
            db_client.decrease_candy_by_tg_id(tg_id, price)

        time_of_end_processing_request = time.time()
        statistics['answer_time'] = round(time_of_end_processing_request - time_of_begin_processing_request, 2)

        save_statistics(statistics)
    else:
        logging.error(f'Model {last_used_model} is not available')
        await message.answer("–° —ç—Ç–æ–π –º–æ–¥–µ–ª—å—é –Ω–µ–ø–æ–ª–∞–¥–∫–∏")



'''
1. –ü—Ä–∏—Ö–æ–¥–∏—Ç –∑–∞–ø—Ä–æ—Å
2. update_sub
3. update_candy
4. check_price



–¥–æ–¥–µ–ª–∞—Ç—å

- –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å –≤–µ—Å—å –∫–æ–¥ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–æ–º—É —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–∞—è –∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–Ω—Ç–∏–∫–∏. –±–µ–∑ —à—Ç—É—á–Ω—ã—Ö –∏–ª–∏ –¥–Ω–µ–≤–Ω—ã—Ö
- –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ñ–æ—Ä–º–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É (–¥–µ—Ä–∂–∞—Ç—å –≤ –≥–æ–ª–æ–≤–µ, —á—Ç–æ —É –Ω–µ–≥–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)
    - —á–µ–∫–Ω—É—Ç—å, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ—Ç. –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å, –ø–æ–∫–∞ –µ—Å—Ç—å —Å—Ç–∞—Ä–∞—è
    - weekly_candy_from_sub = —Å–∫–æ–ª—å–∫–æ —ç—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç
    - –æ—Å—Ç–∞–≤–∏—Ç—å last_fantiks_update_date = None (—á—Ç–æ–±—ã –ø—Ä–∏ –æ—á–µ—Ä–µ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ —É —á–µ–ª–∞ –ø—Ä–∏—à–ª–∏ —Ñ–∞–Ω—Ç–∏–∫–∏)
    - user.has_sub = True
    - deposits_amount = 4
'''

