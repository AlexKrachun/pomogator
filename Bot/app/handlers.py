import logging
from aiogram import types, Bot
from aiogram.types import Message
from aiogram import Router, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from aiogram.filters import Command
from Bot.additioanl.message_templates import message_templates, get_changed_context_line
from Bot.app.keyboard import inline_contexts, inline_modes, inline_pay, dalle_3_settings
from Bot.app.openai_api import get_completion, request_get_topic, generate_image, get_common_gpt_complection
from Bot.app.faceswap_api import run_face_swap

from db.main import db_client

from Bot.app.utils.state import id_in_processing


from dotenv import load_dotenv
import os

load_dotenv()
BOT_TOKEN = os.environ.get('BOT_TOKEN')


logger = logging.getLogger(__name__)

router = Router()


# class FaceSwap(StatesGroup):
#      = State()

# class DalleGeneration(StatesGroup):
#     promt = State()
#
#
# @router.message(Command('img'))
# async def get_promt(message: types.Message, state: FSMContext):
#     await state.set_state(DalleGeneration.promt)
#     await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:')

#
# @router.message(DalleGeneration.promt)
# async def ret_dalle_img(message: types.Message, state: FSMContext):
#     await state.update_data(promt=message.text)
#     data = await state.get_data()
#     # await message.answer(f'–í–∞—à –ø—Ä–æ–º—Ç: {data}')
#     await state.clear()
#
#     dalle_promt = data['promt']
#     if dalle_promt == '/start':
#         await message.answer(message_templates['ru']['start'])
#         return None


@router.message(Command('contexts'))
async def language_cmd(message: types.Message):
    try:
        reply_markup = await inline_contexts(message.from_user.id)
        await message.answer(
            message_templates['ru']['contexts'],
            reply_markup=reply_markup
        )
        logger.debug("–û—Ç–≤–µ—Ç –Ω–∞ /contexts —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /contexts: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /contexts.")


@router.message(Command('pay'))
async def pay_cmd(message: types.Message):
    try:
        await message.answer(
            '–ü–æ–∫–∞ —Ç—É—Ç –≤—Å–µ for free, –º—ã –≤–æ–∑—å–º–µ–º –æ—Ç –≤–∞—Å –¥–µ–Ω—å–≥–∏ –≤ next time.',
            reply_markup=inline_pay
        )
        logger.debug("–û—Ç–≤–µ—Ç –Ω–∞ /pay —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /pay: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /pay.")


@router.message(Command('mode'))
async def mode_cmd(message: types.Message):
    try:
        reply_markup = await inline_modes(
            message.from_user.id,
            # curr_users_models
            db_client.get_user_model_by_tg_id(tg_id=message.from_user.id, ),
        )
        await message.answer(
            '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –≤–∞–º –º–æ–¥–µ–ª—å gpt.',
            reply_markup=reply_markup
        )
        logger.debug("–û—Ç–≤–µ—Ç –Ω–∞ /mode —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /mode: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /mode.")


@router.message(Command('start'))
async def start_cmd(message: types.Message):
    try:
        # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        us_id = message.from_user.id
        if db_client.user_is_new_by_tg_id(us_id):
            db_client.add_user(name=message.from_user.full_name, tg_id=us_id,
                               last_used_model='gpt-4o-mini')  # –≤–æ–∑–º–æ–∂–Ω–æ full_name –ø—É—Å—Ç–æ–π
            chat_id = db_client.create_new_context_by_tg_id(tg_id=us_id)  # –Ω–æ–≤—ã–π —á–∞—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '–ü—É—Å—Ç–æ–π —á–∞—Ç'
            db_client.set_current_context_by_tg_id(tg_id=us_id, context_id=chat_id)

        await message.answer(message_templates['ru']['start'])
        logger.debug("–û—Ç–≤–µ—Ç –Ω–∞ /start —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logger.exception(f'–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}')
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start.")


@router.message(Command('profile'))
async def profile_command(message: Message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"
        first_name = message.from_user.first_name or "–Ω–µ —É–∫–∞–∑–∞–Ω"
        last_name = message.from_user.last_name or "–Ω–µ —É–∫–∞–∑–∞–Ω"

        profile_info = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"ID: {user_id}\n"
            f"–ò–º—è: {first_name}\n"
            f"–§–∞–º–∏–ª–∏—è: {last_name}\n"
            f"–õ–æ–≥–∏–Ω: @{username}"
        )
        await message.answer(profile_info)
        logger.debug("–û—Ç–≤–µ—Ç –Ω–∞ /profile —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logger.exception(f'–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /profile: {e}')
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /profile.")


@router.message(Command('help'))
async def help_cmd(message: Message):
    try:
        await message.answer(message_templates['ru']['help'])
        logger.debug("–û—Ç–≤–µ—Ç –Ω–∞ /help —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logger.exception(f'–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /help: {e}')
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /help.")


@router.message(Command('new_context'))
async def new_context(message: Message):
    try:
        chat_id = db_client.create_new_context_by_tg_id(tg_id=message.from_user.id)
        db_client.set_current_context_by_tg_id(tg_id=message.from_user.id, context_id=chat_id)
        await message.answer(message_templates['ru']['delete_context'])
        logger.debug("–û—Ç–≤–µ—Ç –Ω–∞ /delete_context —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logger.exception(f'–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /delete_context: {e}')
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /delete_context.")


@router.callback_query(F.data.startswith('context:'))
async def handle_context_switch(callback: types.CallbackQuery):
    try:
        context_id = callback.data.removeprefix("context:")
        us_id = callback.from_user.id

        topic = db_client.get_current_context_by_tg_id(tg_id=us_id).name
        db_client.set_current_context_by_tg_id(tg_id=us_id, context_id=context_id)

        await callback.answer()
        await callback.message.answer(get_changed_context_line(topic))

        context_history = db_client.make_context_history(chat_id=context_id)
        logger.info(f'–í—ã–≤–µ–¥–µ–Ω–∞ context_history –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us_id}')

        try:
            await callback.message.answer(context_history, parse_mode="Markdown")
        except Exception as e:
            await callback.message.answer(context_history)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_context_switch: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.")


@router.callback_query(F.data.startswith('model:'))
async def handle_model_switch(callback: types.CallbackQuery):
    try:
        model_name = callback.data.removeprefix("model:")
        us_id = callback.from_user.id
        if db_client.get_user_model_by_tg_id(us_id) != model_name:
            db_client.switch_user_model_by_tg_id(tg_id=us_id, new_model_name=model_name)

            await callback.message.edit_text(
                '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –≤–∞–º –º–æ–¥–µ–ª—å.',
                reply_markup=await inline_modes(us_id, db_client.get_user_model_by_tg_id(tg_id=us_id))
            )
            if model_name in ['dall-e-3']:
                curr_size = db_client.get_dalle_shape_by_tg_id(us_id)
                curr_resolution = db_client.get_dalle_quality_by_tg_id(us_id)
                await callback.message.answer(message_templates['ru']['dall_e_3_handler'],
                                              reply_markup=await dalle_3_settings(us_id, curr_resolution,curr_size))

            await callback.answer()
            logger.debug(f"–ú–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {model_name}")
        else:
            await callback.answer()

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_model_switch: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –º–æ–¥–µ–ª–∏.")


@router.callback_query(F.data.startswith('quality:'))
async def handle_dalle_3_quality_switch(callback: types.CallbackQuery):
    try:
        curr_quality = callback.data.removeprefix("quality:")
        us_id = callback.from_user.id
        if db_client.get_dalle_quality_by_tg_id(us_id) != curr_quality:
            db_client.set_dalle_quality_by_tg_id(tg_id=us_id, dalle_quality=curr_quality)

            await callback.message.edit_text(
                '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.',
                reply_markup=await dalle_3_settings(us_id, curr_quality, db_client.get_dalle_shape_by_tg_id(us_id))
            )
            await callback.answer()
            logger.debug(f"–ö–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {curr_quality}")
        else:
            await callback.answer()

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_dalle_3_quality_switch: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ dalle_3_quality.")


@router.callback_query(F.data.startswith('resolution:'))
async def handle_dalle_3_resolution_switch(callback: types.CallbackQuery):
    try:
        curr_resolution = callback.data.removeprefix("resolution:")
        us_id = callback.from_user.id
        if db_client.get_dalle_shape_by_tg_id(us_id) != curr_resolution:
            db_client.set_dalle_shape_by_tg_id(us_id, dalle_shape=curr_resolution)

            await callback.message.edit_text(
                '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ.',
                reply_markup=await dalle_3_settings(user_id=us_id, quality=db_client.get_dalle_quality_by_tg_id(us_id), resolution=curr_resolution)
            )
            await callback.answer()
            logger.debug(f"–ú–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {curr_resolution}")
        else:
            await callback.answer()

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_dalle_3_resolution_switch: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.")


async def openai_gpt_handler(message: Message, bot: Bot, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    us_id = message.from_user.id
    user_message = message.text
    id_in_processing.add(us_id)

    try:
        if db_client.user_has_empty_curr_context_by_tg_id(us_id):
            chat_id = db_client.get_current_context_id_by_tg_id(tg_id=us_id)

            dialog_name = await request_get_topic(user_message)

            db_client.update_dialog_neame(chat_id=chat_id, dialog_name=dialog_name)

        curr_context_id = db_client.get_current_context_by_tg_id(us_id).id

        db_client.add_message(chat_id=curr_context_id, role='user', text=user_message)

        processing_message = await message.answer(message_templates['ru']['processing'])

        await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")

        response = await get_common_gpt_complection(
            db_client.get_full_dialog(curr_context_id)[-15:],
            db_client.get_user_model_by_tg_id(us_id)
        )

        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us_id}: {response}")

        await message.bot.delete_message(
            chat_id=processing_message.chat.id,
            message_id=processing_message.message_id
        )

        try:
            await message.answer(response, parse_mode="Markdown")
        except Exception as e:
            await message.answer(response)

        db_client.add_message(chat_id=curr_context_id, role='assistant', text=response)


    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ openai_gpt_handler –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    finally:
        if us_id in id_in_processing:
            id_in_processing.remove(us_id)
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {us_id} –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ openai_gpt_handler.")


async def dall_e_3_handler(message: Message, bot: Bot, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text} –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

    us_id = message.from_user.id
    if us_id in id_in_processing:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {us_id} –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        await message.answer(message_templates['ru']['id_in_procces'])
        return

    try:
        id_in_processing.add(us_id)

        processing_message = await message.answer(message_templates['ru']['processing'])
        await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")

        curr_size = db_client.get_dalle_shape_by_tg_id(us_id)
        curr_quality = db_client.get_dalle_quality_by_tg_id(us_id)
        ans = await generate_image(message.text, model="dall-e-3", size=curr_size, quality=curr_quality)

        if ans.startswith("http://") or ans.startswith("https://"):
            try:
                await message.answer_photo(ans, caption="–í–æ—Ç –≤–∞—à–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")
                await message.bot.delete_message(
                    chat_id=processing_message.chat.id,
                    message_id=processing_message.message_id
                )
            except Exception as e:
                await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
        else:
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç openai API —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            # await message.answer("–°–ª–∏—à–∫–æ–º –ø–æ—à–ª—ã–π –∑–∞–ø—Ä–æ—Å")
                await message.answer("–°–ª–∏—à–∫–æ–º –ø–æ—à–ª—ã–π –∑–∞–ø—Ä–æ—Å")


        curr_size = db_client.get_dalle_shape_by_tg_id(us_id)
        curr_resolution = db_client.get_dalle_quality_by_tg_id(us_id)
        await message.answer(message_templates['ru']['dall_e_3_handler'],
                                      reply_markup=await dalle_3_settings(us_id, curr_resolution, curr_size))



    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ ret_dalle_img –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    finally:
        if us_id in id_in_processing:
            id_in_processing.remove(us_id)
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {us_id} –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è.")




# async def face_swap_handler(message: Message, bot: Bot):
    # file = await bot.get_file(file_id)
    # file_url = f"https://api.telegram.org/file/bot{API_TOKEN}/{file.file_path}"
    # await file.download_to('downloaded_photo.jpg')
    #  await message.answer(f"–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º –º–µ–Ω—è—Ç—å")

        



# class DalleGeneration(StatesGroup):
#     promt = State()
#
#
# @router.message(Command('img'))
# async def get_promt(message: types.Message, state: FSMContext):
#     await state.set_state(DalleGeneration.promt)
#     await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:')

#
# @router.message(DalleGeneration.promt)
# async def ret_dalle_img(message: types.Message, state: FSMContext):
#     await state.update_data(promt=message.text)
#     data = await state.get_data()
#     # await message.answer(f'–í–∞—à –ø—Ä–æ–º—Ç: {data}')
#     await state.clear()
#
#     dalle_promt = data['promt']
#     if dalle_promt == '/start':
#         await message.answer(message_templates['ru']['start'])
#         return None



class FaceSwap(StatesGroup):
    photo_1_done = State()
    
# async def get_promt(message: types.Message, state: FSMContext):
#     await state.set_state(DalleGeneration.promt)
#     await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:')


async def face_swap_handler_first_photo(message: Message, bot: Bot, state: FSMContext):
    
    photo = message.photo[-1]
    file_id = photo.file_id

    file = await bot.get_file(file_id)
    file_path = file.file_path

    img_1_url = f'https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}'
    await state.set_state(FaceSwap.photo_1_done)
    await state.update_data(photo_1_done=img_1_url)
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –∂–µ–ª–∞–µ–º—ã–º –ª–∏—Ü–æ–º')
    
    
@router.message(FaceSwap.photo_1_done)
async def face_swap_handler_second_photo(message: Message, bot: Bot, state: FSMContext):
    photo = message.photo[-1]
    file_id = photo.file_id

    file = await bot.get_file(file_id)
    file_path = file.file_path

    img_2_url = f'https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}'
    
    data = await state.get_data()
    img_1_url = data['photo_1_done']

    swapped_img_url = await run_face_swap(main_img_url=img_1_url, face_img_url=img_2_url)
    
    await message.answer(f'{swapped_img_url=}')

    
# async def face_swap_handler(message: Message, bot: Bot, state: FSMContext):
#     print('+' * 1000)

    # print(file_url)
    # await message.answer(f'–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {file_url}')



model_handler = {  # –¥–ª—è –Ω–µ–π—Ä–æ–Ω–∫–∏ —Ö—Ä–∞–Ω–∏–º —Ö–µ–Ω–¥–ª–µ—Ä
    'gpt-4o-mini': openai_gpt_handler,
    'gpt-4o': openai_gpt_handler,
    'o1-mini': openai_gpt_handler,
    'o1-preview': openai_gpt_handler,
    'dall-e-3': dall_e_3_handler,
    'face-swap': face_swap_handler_first_photo
}


@router.message()
async def echo_msg(message: Message, bot: Bot, state: FSMContext):
    
    # try:
    #     # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    #     us_id = message.from_user.id
    #     if db_client.user_is_new_by_tg_id(us_id):
    #         db_client.add_user(name=message.from_user.full_name, tg_id=us_id,
    #                            last_used_model='gpt-4o-mini')  # –≤–æ–∑–º–æ–∂–Ω–æ full_name –ø—É—Å—Ç–æ–π
    #         chat_id = db_client.create_new_context_by_tg_id(tg_id=us_id)  # –Ω–æ–≤—ã–π —á–∞—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '–ü—É—Å—Ç–æ–π —á–∞—Ç'
    #         db_client.set_current_context_by_tg_id(tg_id=us_id, context_id=chat_id)

    #     await message.answer(message_templates['ru']['start'])
    #     logger.debug("–û—Ç–≤–µ—Ç –Ω–∞ /start —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    # except Exception as e:
    #     logger.exception(f'–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}')
    #     await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start.")

    
    us_id = message.from_user.id
    user_message = message.text

    print('1' * 100)
    if us_id in id_in_processing:
        await message.answer(message_templates['ru']['id_in_procces'])
        return
    
    print('2' * 100)

    last_used_model = db_client.get_user_model_by_tg_id(message.from_user.id)
    print(f'–î–µ–±–∞–≥ - {last_used_model}')

    await model_handler[last_used_model](message, bot, state)
